(defun is-break (c)
  (in c '(" " "\t" "\n" "\r" "(" ")")))

(defun hook-char (c fn)
	(set-hash *charhooks* c fn))

(defun char-hook-l (c rest)
  (if (get-hash *charhooks* c)
      (let* ((restpair (p-form rest))
	     (ncode (car restpair))
	     (form (cadr restpair)))
        (list ncode (funcall (get-hash *charhooks* c) form)))
      (list (concat c rest) nil)))

(defun p-line (rest)
  (if (eql rest "")
      (list "" nil)
      (let* ((c (subseq rest 0 1)))
        (cond ((in c '("\n" "\r"))
							 (p-whitespace (subseq rest 1)))
							(t
							 (p-line (subseq rest 1)))))))

(defun p-whitespace (rest)
  (if (eql rest "")
      (list "" nil)
      (let* ((c (subseq rest 0 1)))
        (cond ((in c '(" " "\t" "\n" "\r"))
							 (p-whitespace (subseq rest 1)))
							((eql c ";")
							 (p-line (subseq rest 1)))
							(t
							 (list rest nil))))))

(defun p-string-rest (rest)
  (let* ((c (subseq rest 0 1)))
    (cond
      ((eql c "\\")			 
           (let* ((restl (p-string-rest (subseq rest 2)))
									(c2 (subseq rest 1 2)))
             (list (car restl) (concat 
																(cond ((eql c2 "n")
																			 "\n")
																			((eql c2 "r")
																			 "\r")
																			((eql c2 "t")
																			 "\t")
																			(t
																			 c2))
																(cadr restl)))))
      ((eql c "\"")
           (list (subseq rest 1) ""))
          (t
           (let* ((restl (p-string-rest (subseq rest 1))))
             (list (car restl) (concat c (cadr restl))))))))

(defun p-string (rest)
	(let* ((result 
					(if (eql (subseq rest 0 1) "\"")
							(p-string-rest (subseq rest 1))
							(p-string-rest rest))))
		(list (car result) (string-t (cadr result)))))

(defun p-atom-symbol (rest)
  (if (eql rest "")
      (list "" nil)
			(let* ((c (subseq rest 0 1))
						 (rest2 (subseq rest 1)))
				(if (is-break c)
						(list rest nil)
						(let* ((restl (p-atom-symbol rest2)))
							(list (car restl)
										(concat c (cadr restl))))))))

(defun p-atom (rest)
  (if (eql rest "")
      (list "" nil)
      (let* ((c (subseq rest 0 1))
             (transformed (char-hook-l c (subseq rest 1))))
        (if (cadr transformed)
            transformed
            (if (eql c "\"")
                (p-string rest)
								(let* ((result (p-atom-symbol rest)))
									(list (car result)
												(if (in c '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
														(number-t (cadr result))
														(symbol-t (cadr result))))))))))

(defun p-list (rest)
  (if (eql rest "")
      (list "" nil)
      (let* ((rest (car (p-whitespace rest))))
        (if (eql rest "")
            (list "" nil)
            (let* ((c (subseq rest 0 1)))
              (if (eql c ")")
                  (list rest nil)
                  (let* ((restl (p-form rest))
                         (restm (p-list (car restl))))
                    (list (car restm)
                          (cons (cadr restl)
                                (cadr restm))))))))))

(defun p-form (rest)
  (let* ((rest (car (p-whitespace rest))))
    (if (eql rest "")
        (list "" nil)
        (let* ((c (subseq rest 0 1)))
          (if (eql c "(")
              (let* ((restl (p-list (subseq rest 1))))
                (if (eql (car restl) "")
                    restl
                    (if (eql (subseq (car restl) 0 1) ")")
                        (list (subseq (car restl) 1) (cadr restl))
                        restl)))
              (p-atom rest))))))

(defun parse (code)
  (cadr (p-list code)))

(defun make-reader (code)
	(let* ((rest code)
				 (result nil))
		(lambda (&rest args)
			(setq result (p-form rest))
			(setq rest (car result))
			(cadr result))))

(defun make-forms-reader (forms)
	(let* ((rest forms)
				 (result nil))
		(lambda (&rest args)
			(setq result (if rest 
											 (car rest)
											 nil))
			(setq rest (if rest 
										 (cdr rest)
										 nil))
			result)))

	
